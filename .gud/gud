#! /bin/sh

GUD_FILE=".gud.json"

confirm() {
    read -p "$1 [Y/n] " response

    response=${response,,}

    if [[ -z "$response" || "$response" =~ ^(yes|y)$ ]]; then
        return 0
    else
        return 1
    fi
}

select_items() {
    local prompt="$1"
    fzf --height=~100% --color=dark,gutter:-1 --multi --bind "tab:toggle+up" --bind "btab:toggle+down"
}

jaq_str_array() {
    jaq -R -s -c 'split("\n") | map(select(. != ""))'
}

write_config() {
    echo -e "{
        \"types\": $1,
        \"scopes\": $2,
        \"ticket_prefix\": \"$3\"
    }" | jaq --indent 2 > "$GUD_FILE"
}

check_gud() {
    find "$GUD_FILE" -maxdepth 0 -type f >/dev/null 2>&1
}

init() {
    if check_gud; then
        echo "GUD already initialized."
        exit 1
    fi

    echo '
                _____ _    _ _____
  ____ _ _     / ____| |  | |  __ \
 / ___(_) |_  | |  __| |  | | |  | |
| |  _| | __| | | |_ | |  | | |  | |
| |_| | | |_  | |__| | |__| | |__| |
 \____|_|\__|  \_____|\____/|_____/

            Initial setup
    '

    if ! find .git -maxdepth 0 -type d >/dev/null 2>&1; then
        if ! confirm "Git is not initialized. Initialize git?"; then
            exit 1
        fi

        git init
    fi

    if ! confirm "Infer commit types and scopes from commit history?"; then
        echo "Creating $GUD_FILE..."
        write_config \
            '["feat", "doc", "chore", "refactor", "fix"]' \
            '["client", "server"]' \
            ""
        exit 0
    fi

    comits=$(git log --oneline | awk -F "[ ():]" '{if ($3) {print $2, $3} else {print $2}}')

    echo "Choose which inferred commit types to keep"
    types=$(echo "$comits" | awk '{print $1}' | sort | uniq | select_items)
    if [[ -z "${types}" ]]; then
        exit 1
    fi

    echo "Choose which inferred commit scopes to keep"
    scopes=$(echo "$comits" | awk '{if ($2) {print $2}}' | sort | uniq | select_items)
    if [[ -z "${scopes}" ]]; then
        exit 1
    fi

    types=$(echo "$types" | jaq_str_array)
    scopes=$(echo "$scopes" | jaq_str_array)
    read -r -p "Enter prefix for the tickets: " prefix

    echo "Creating $GUD_FILE..."
    write_config \
        "$types" \
        "$scopes" \
        "$prefix"
}

commit() {
    if ! check_gud; then
        echo "GUD is not initialized."
        exit 1
    fi

    new_choice="~new"

    echo "Choose commit type"
    type=$(jaq -r ".types[]" < "$GUD_FILE" | echo -e "$(cat -)\n$new_choice" | fzf --height=~100% --bind "tab:up" --bind "btab:down")
    if [ -z "$type" ]; then
        exit 1
    fi
    if [[ "$type" == "$new_choice" ]]; then
        read -r -p "Enter a new commit type: " type
    fi

    echo "Choose commit scope"
    scope=$(jaq -r ".scopes[]" < "$GUD_FILE" | echo -e "$(cat -)\n$new_choice" | fzf --height=~100% --bind "tab:up" --bind "btab:down")
    if [ -z "$scope" ]; then
        exit 1
    fi
    if [[ "$scope" == "$new_choice" ]]; then
        read -r -p "Enter a new commit scope: " scope
    fi

    read -r -p "Enter a short description: " short_description

    if [ -z "$short_description" ]; then
        echo "A short description is required."
        exit 1
    fi

    read -r -p "Enter related ticket (optional): " ticket

    echo "Enter a long description, press Ctrl-D when done:"
    long_description=$(</dev/stdin)

    commit_message="$type($scope): $short_description"

    if [ -n "$ticket" ]; then
        ticket_prefix=$(jaq -r ".ticket_prefix" < "$GUD_FILE")
        commit_message=$(printf "$commit_message\n\n[Related to: $ticket_prefix$ticket]")
    fi

    if [ -n "$long_description" ]; then
        commit_message=$(printf "$commit_message\n\n${long_description}")
    fi

    git commit -e -m "$commit_message"
}

if [[ $# -gt 0 ]]; then
    case "$1" in
        init)
            init
            ;;
        commit)
            commit
            ;;
    esac
else
    usage
    exit 1
fi
