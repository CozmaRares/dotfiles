#! /bin/sh

LAYOUT_ROOT="$TX_ROOT/layouts"

is_session() {
    if tmux ls 2>/dev/null | awk -F '[:,()]' '{print $1}' | grep -qx "$1"; then
        return 0
    fi

    return 1
}

 is_layout() {
    if ls "$LAYOUT_ROOT" | grep -qx "$1.layout.sh"; then
        return 0
    fi

    return 1
 }

usage() {
    cat <<EOF
Usage:
    -h | --help | help        --  show this help message
    (-l | --layout) [layout]  --  create a new layout or edit existing one
    --ls | ls                 --  show running sessions and layouts
    --preview                 --  preview session or layout
    --picker                  --  pick session or layout
    [layout]                  --  create new session from the given layout, or a blank session with the given name
    (no arguments)            --  attach to the last active session
EOF
}

preview() {
    if is_session $1; then
        tmux capture-pane -ep -t "$1"
        return
    fi

    if is_layout $1; then
        bat "$LAYOUT_ROOT/$1.layout.sh" --color=always
        return
    fi
}

picker() {
    if [ -z "$TMUX" ]; then
        selected=$(
            tx ls | \
            fzf \
                --bind=tab:up,btab:down \
                --preview 'echo {} | awk "{print \$1}" | xargs -I{} bash -c "tx --preview {}"' \
        )
    else
        selected=$(
            tx ls | \
            fzf \
                --tmux center,75%,80% \
                --bind=tab:up,btab:down \
                --preview 'echo {} | awk "{print \$1}" | xargs -I{} bash -c "tx --preview {}"' \
                --preview-window 'up,75%,border-bottom' \
        )
    fi

    if [ $? -eq 0 ]; then
        tx "$selected"
    fi
}

list() {
    sessions=$(tmux ls 2>/dev/null | awk -F '[:,()]' '{print $1}')

    layouts=$(
        find "$LAYOUT_ROOT" -type f -name '*.layout.sh' -exec basename {} .layout.sh \; | while read -r layout; do
            echo "$sessions" | grep -qx "$layout"
            if [ $? -ne 0 ]; then
                echo "$layout"
            fi
        done
    )

    max_len=$( { echo "$sessions"; echo "$layouts"; } | awk '{print length}' | sort -nr | head -1 )

    tmux ls 2>/dev/null | awk -v max_len="$max_len" -F '[:,()]' '{printf "%-*s (session) (%d windows)%s\n", max_len, $1, $2, ($0 ~ /attached/) ? " (attached)" : ""}'
    echo "$layouts" | awk -v max_len="$max_len" '{printf "%-*s (layout)\n", max_len, $1}'
}

example_layout() {
    cat > $2 <<EOF
. $TX_ROOT/functions.sh

# Set up project with a root dir, and name
project_root ~
session_name "$1"

# create your session
new_session

# layout your session
rename_window "code"
run_command "nvim"

new_window "servers"
split_horizontal 50%

# select the window you want first
select_window "code"

# attach to your session
attach_to_session
EOF
}

new_session() {
    if is_session $1; then
        tmux_attach_or_switch $1
        return
    fi

    if is_layout $1; then
        . "$LAYOUT_ROOT/$1.layout.sh"
        return
    fi

    tmux new-session -d -s "$1"
    tmux_attach_or_switch $1
}

tmux_attach_or_switch() {
    if [ -z "$TMUX" ]; then
        tmux attach-session -t "$1"
    else
        tmux switch-client -t "$1"
    fi
}

editor_session() {
    file="$LAYOUT_ROOT/$1.layout.sh"

    if [[ ! -f $file ]] then
        example_layout $1 $file
    fi

    $EDITOR $file
}

if [[ $# -gt 0 ]]; then
    case "$1" in
        --ls | ls)
            list
            ;;
        -h | --help | help)
            usage
            ;;
        -l | --layout)
            if [[ -n "$2" && "$2" != --* ]]; then
                editor_session "$2"
            else
                echo "Error: --layout requires a value"
                usage
            fi
            ;;
        --preview)
            if [[ -n "$2" && "$2" != --* ]]; then
                preview "$2"
            else
                echo "Error: --preview requires a value"
                usage
            fi
            ;;
        --picker)
            picker
            ;;
        *)
            new_session $1
            ;;
    esac
else
    if [ -z "$TMUX" ]; then
        tmux attach
    else
        echo "Error: already attached"
        exit 1
    fi
fi
