#! /bin/sh

SESSIONS_ROOT="$TX_ROOT/sessions"
DIRS="$SESSIONS_ROOT/dirs.txt"

FZF_TMUX="--tmux center,75%,80%"
FZF_ARGS="--color=dark,gutter:-1"

. $TX_ROOT/helpers.sh

list() {
    sessions=$(get_sessions)

    layouts=$(
        get_layouts | while read -r layout; do
            echo "$sessions" | grep -qx "$layout"
            if [ $? -ne 0 ]; then
                echo "$layout"
            fi
        done
    )

    max_len=$( { echo "$sessions"; echo "$layouts"; } | awk '{print length}' | sort -nr | head -1 )

    tmux_ls | awk -v max_len="$max_len" -F '[:,()]' '{printf "%-*s (session) (%d windows)%s\n", max_len, $1, $2, ($0 ~ /attached/) ? " (attached)" : ""}'
    echo "$layouts" | awk -v max_len="$max_len" '{printf "%-*s (layout)\n", max_len, $1}'
}

new_session() {
    if is_session $1; then
        tmux_attach_or_switch $1
        return
    fi

    if is_layout $1; then
        . "$SESSIONS_ROOT/$1.layout.sh"
        return
    fi

    tmux new-session -d -s "$1"
    tmux_attach_or_switch $1
}

edit_layout() {
    file="$SESSIONS_ROOT/$1.layout.sh"

    if [[ ! -f $file ]] then
        example_layout $1 $file
    fi

    $EDITOR $file
}

preview() {
    if is_session $1; then
        tmux capture-pane -ep -t "$1"
        return
    fi

    if is_layout $1; then
        bat "$SESSIONS_ROOT/$1.layout.sh" --color=always
        return
    fi
}

picker() {
    if [ -z "$TMUX" ]; then
        selected=$(
            tx ls | \
            fzf \
                $FZF_ARGS \
                --bind "tab:up" \
                --bind "btab:down" \
                --preview 'echo {} | awk "{print \$1}" | xargs -I{} bash -c "tx --preview {}"' \
        )
    else
        selected=$(
            tx ls | \
            fzf \
                $FZF_ARGS \
                $FZF_TMUX \
                --bind "tab:up" \
                --bind "btab:down" \
                --preview 'echo {} | awk "{print \$1}" | xargs -I{} bash -c "tx --preview {}"' \
                --preview-window 'up,75%,border-bottom' \
        )
    fi

    if [ $? -eq 0 ]; then
        tx "$selected"
    fi
}

sessionizer() {
    if [[ $# -eq 1 ]]; then
        where=$1
    else
        if [ ! -f "$DIRS" ]; then
            touch "$DIRS"
            echo "File $DIRS did not exist, so it has been created. Please add directories to it."
            exit 1
        fi

        where=$(cat "$DIRS")
    fi

    dir=$(cat "$DIRS" | xargs -I{} find {} -maxdepth 1 -type d | fzf $FZF_ARGS $FZF_TMUX)
    selected=$(basename "$dir")

    while is_session "$selected"; do
        printf "Session with the same name exists.\nEnter another name: "
        read selected
    done

    tmux new-session -d -s "$selected" -c "$dir" 2>/dev/null
    tmux_attach_or_switch "$selected"
}

add_session_dir() {
    args="-mindepth 0 -maxdepth 1 -type d"
    selected=$(find / $args | fzf $FZF_ARGS $FZF_TMUX --bind "tab:replace-query+reload(find '{}' $args)")
    if [ -n "$selected" ]; then
        tmp=$(mktemp)
        { echo "$selected"; cat "$DIRS"; } | sort | uniq > "$tmp"
        mv "$tmp" "$DIRS"
    fi
}

rm_session_dir() {
    selected=$(cat "$DIRS" | fzf $FZF_ARGS $FZF_TMUX --multi --bind "tab:select+up" --bind "btab:deselect+down")
    if [ -n "$selected" ]; then
        tmp=$(mktemp)
        grep -vFx "$selected" "$DIRS" > "$tmp"
        mv "$tmp" "$DIRS"
    fi
}

if [[ $# -gt 0 ]]; then
    case "$1" in
        --help | -h)
            usage
            ;;
        --ls | ls)
            list
            ;;
        --ls-sessions | lss)
            list | grep "(session)"
            ;;
        --ls-layouts  | lsl)
            list | grep "(layout)"
            ;;
        --layout | -l)
            if [[ -n "$2" && "$2" != --* ]]; then
                edit_layout "$2"
            else
                echo "Error: --layout requires a value"
                usage
            fi
            ;;
        --preview)
            if [[ -n "$2" && "$2" != --* ]]; then
                preview "$2"
            else
                echo "Error: --preview requires a value"
                usage
            fi
            ;;
        --picker | -p)
            picker
            ;;
        --sessions | -s)
            sessionizer
            ;;
        --add-sessions | -as)
            add_session_dir
            ;;
        --rm-sessions | -rs)
            rm_session_dir
            ;;
        *)
            new_session $1
            ;;
    esac
else
    if [ -z "$TMUX" ]; then
        tmux attach
    else
        echo "Error: already attached"
        exit 1
    fi
fi
